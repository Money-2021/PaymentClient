// PRIMARY MARKET

 [TestMethod]
 public void UseCase_mkt_primary_execute_sell()
 {

     // Primary Market
     // IPO 
     // Sell
     Set_AUD();
     string folder = Environment.GetEnvironmentVariable("Envionment");
     Guid orderbookNo = new Guid(Environment.GetEnvironmentVariable("BHPOrderBook"));
     decimal price = 10;
     int qty = 100;
     string corp_sin = Environment.GetEnvironmentVariable("BHP");
     // As this creates new setupcodes will expire any old or existing ones..
     string _userSecureIdentity = Environment.GetEnvironmentVariable("SinA");
     string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + corp_sin + ".jwt";
     RecoveryResponse r = GetUserToken(userTokenPath);

     // Extract Function endpoint from User Token
     var securityToken = new JwtSecurityToken(r.userToken);
     Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());

     HttpClient _httpClient = new HttpClient();
     _httpClient.BaseAddress = _baseUri;

     // Build funtion endpoint Uri
     string _relativeUrl = "api/User/SignHash?type=" + ProviderType.Payment.ToString();
     Uri _uri = new Uri(_baseUri, _relativeUrl);
     _httpClient.BaseAddress = _baseUri;

     // Add User Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
     // Add OTP 
     Guid nonce = Guid.NewGuid();
     _httpClient.DefaultRequestHeaders.Add("x-nonce", nonce.ToString());
     // Transation Hash
     string _shash = orderbookNo.ToString() + corp_sin + price.ToString() + qty.ToString();
      byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(_shash));
     _httpClient.DefaultRequestHeaders.Add("x-hash", Convert.ToBase64String(hashBytes));
     // autheticate
     var twoFactorAuthenticator = new Google.Authenticator.TwoFactorAuthenticator();
     long counter = BytesToLong(hashBytes);
     string otpPin = twoFactorAuthenticator.GeneratePINAtInterval(r.setupcode, counter);
     _httpClient.DefaultRequestHeaders.Add("x-otp", otpPin);
     string signHashResponse = null;
     HttpResponseMessage  response = _httpClient.GetAsync(_uri).Result;
     if (response.IsSuccessStatusCode)
     {
         signHashResponse = response.Content.ReadAsStringAsync().Result;
     }
     else
     {
         string sError = response.Content.ReadAsStringAsync().Result;
         throw new Exception(sError);
     }

     // Load post content 
     StringContent content = new StringContent(signHashResponse);

     // Build funtion endpoint Uri
     _relativeUrl = "api/EquityMarket/SellOrder";
     _uri = new Uri(_baseUri, _relativeUrl);
     var postParms = new Dictionary<string, string>
         {
             { "orderbookNo", orderbookNo.ToString() },
             { "price", price.ToString("N2") },
             { "qty", qty.ToString("N0") }
         };
      string url = BuildUrlWithQueryStringUsingUriBuilder(_uri.AbsoluteUri, postParms);
      // Buid, absolute Uri
      _uri = new Uri(url);

    
     // Post to debit infastruture
     _httpClient = new HttpClient();
     _httpClient.BaseAddress = _baseUri;
     // Add User Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
     response = _httpClient.PostAsync(_uri, content).Result;
     if (response.IsSuccessStatusCode)
     {
         // PaymentResponse to debitor 
         string json = response.Content.ReadAsStringAsync().Result;
         string receiptPath = @"D:\Examples\" + node + @"\Trades\TradeReceipt-" + corp_sin + ".jwt";
         System.IO.File.WriteAllText(receiptPath, json);
     }
     else
     {
         string sError = response.Content.ReadAsStringAsync().Result;
         throw new Exception(sError);
     }

    
 }

SECONDARY MARKET
 [TestMethod]
 public void UseCase_mkt_secondary_sell()
 {

     // Secondary Market
     // Sell
     Set_AUD();
     string folder = Environment.GetEnvironmentVariable("Envionment");
     Guid orderbookNo = new Guid(Environment.GetEnvironmentVariable("BHPOrderBook"));
     decimal price = 9;
     int qty = 1;
     // Sell SecureIdentity
     string sin = Environment.GetEnvironmentVariable("SinB");
     string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + sin + ".jwt";
     RecoveryResponse r = GetUserToken(userTokenPath);

     // Extract Function endpoint from User Token
     var securityToken = new JwtSecurityToken(r.userToken);
     Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
     HttpClient _httpClient = new HttpClient();
     _httpClient.BaseAddress = _baseUri;
     // Build funtion endpoint Uri
     string _relativeUrl = "api/User/SignHash?type=" + ProviderType.Order.ToString(); // Market order
     Uri _uri = new Uri(_baseUri, _relativeUrl);
     _httpClient.BaseAddress = _baseUri;
     // Add User Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
     // Add OTP 
     Guid nonce = Guid.NewGuid();
     _httpClient.DefaultRequestHeaders.Add("x-nonce", nonce.ToString());
     // Transation Hash
     string _shash = nonce.ToString()+ orderbookNo.ToString() + sin + price.ToString("N2") + qty.ToString("N0");
     byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(_shash));
     _httpClient.DefaultRequestHeaders.Add("x-hash", Convert.ToBase64String(hashBytes));
     // autheticate
     var twoFactorAuthenticator = new Google.Authenticator.TwoFactorAuthenticator();
     long counter = BytesToLong(hashBytes);
     string otpPin = twoFactorAuthenticator.GeneratePINAtInterval(r.setupcode, counter);
     _httpClient.DefaultRequestHeaders.Add("x-otp", otpPin);
     string signHashResponse = null;
     HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
     if (response.IsSuccessStatusCode)
     {
         // Save Authorisation
         signHashResponse = response.Content.ReadAsStringAsync().Result;
     }
     else
     {
         string sError = response.Content.ReadAsStringAsync().Result;
         throw new Exception(sError);
     }

     // Load post content 
     StringContent content = new StringContent(signHashResponse);

     // Build funtion endpoint Uri
     _relativeUrl = "api/EquityMarket/SellOrder";
     _uri = new Uri(_baseUri, _relativeUrl);
     var postParms = new Dictionary<string, string>
         {
             { "orderbookNo", orderbookNo.ToString() },
             { "price", price.ToString("N2") },
             { "qty", qty.ToString("N0") }
         };
     string url = BuildUrlWithQueryStringUsingUriBuilder(_uri.AbsoluteUri, postParms);
     // Buid, absolute Uri
     _uri = new Uri(url);

     // Post 
     _httpClient = new HttpClient();
     _httpClient.BaseAddress = _baseUri;
     response = _httpClient.PostAsync(_uri, content).Result;
     if (response.IsSuccessStatusCode)
     {
         // PaymentResponse to debitor 
         string json = response.Content.ReadAsStringAsync().Result;
         string receiptPath = @"D:\Examples\" + node + @"\Trades\TradeReceipt-" + sin + ".jwt";
         System.IO.File.WriteAllText(receiptPath, json);
     }
     else
     {
         string sError = response.Content.ReadAsStringAsync().Result;
         throw new Exception(sError);
     }

 }
 [TestMethod]
 public void UseCase_mkt_secondary_buy()
 {

     // Secondary Market
     // Buy
     Set_AUD();
     string folder = Environment.GetEnvironmentVariable("Envionment");
     Guid orderbookNo = new Guid(Environment.GetEnvironmentVariable("BHPOrderBook"));
     decimal price = 9;
     int qty = 1;
     // Sell SecureIdentity
     string sin = Environment.GetEnvironmentVariable("SinA");
     string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + sin + ".jwt";
     RecoveryResponse r = GetUserToken(userTokenPath);

     // Extract Function endpoint from User Token
     var securityToken = new JwtSecurityToken(r.userToken);
     Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
     HttpClient _httpClient = new HttpClient();
     _httpClient.BaseAddress = _baseUri;
     // Build funtion endpoint Uri
     string _relativeUrl = "api/User/SignHash?type=" + ProviderType.Order.ToString(); // Market order
     Uri _uri = new Uri(_baseUri, _relativeUrl);
     _httpClient.BaseAddress = _baseUri;
     // Add User Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
     // Add OTP 
     Guid nonce = Guid.NewGuid();
     _httpClient.DefaultRequestHeaders.Add("x-nonce", nonce.ToString());
     // Transation Hash
     string _shash = nonce.ToString()+ orderbookNo.ToString() + sin + price.ToString("N2") + qty.ToString("N0");
     byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(_shash));
     _httpClient.DefaultRequestHeaders.Add("x-hash", Convert.ToBase64String(hashBytes));
     // autheticate
     var twoFactorAuthenticator = new Google.Authenticator.TwoFactorAuthenticator();
     long counter = BytesToLong(hashBytes);
     string otpPin = twoFactorAuthenticator.GeneratePINAtInterval(r.setupcode, counter);
     _httpClient.DefaultRequestHeaders.Add("x-otp", otpPin);
     string signHashResponse = null;
     HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
     if (response.IsSuccessStatusCode)
     {
         // Save Authorisation
         signHashResponse = response.Content.ReadAsStringAsync().Result;
     }
     else
     {
         string sError = response.Content.ReadAsStringAsync().Result;
         throw new Exception(sError);
     }

     // Load post content 
     StringContent content = new StringContent(signHashResponse);

     // Build funtion endpoint Uri
     _relativeUrl = "api/EquityMarket/BuyOrder";
     _uri = new Uri(_baseUri, _relativeUrl);
     var postParms = new Dictionary<string, string>
         {
             { "orderbookNo", orderbookNo.ToString() },
             { "price", price.ToString("N2") },
             { "qty", qty.ToString("N0") }
         };
     string url = BuildUrlWithQueryStringUsingUriBuilder(_uri.AbsoluteUri, postParms);
     // Buid, absolute Uri
     _uri = new Uri(url);

     // Post 
     _httpClient = new HttpClient();
     _httpClient.BaseAddress = _baseUri;
     response = _httpClient.PostAsync(_uri, content).Result;
     if (response.IsSuccessStatusCode)
     {
         // PaymentResponse to debitor 
         string json = response.Content.ReadAsStringAsync().Result;
         string receiptPath = @"D:\Examples\" + node + @"\Trades\TradeReceipt-" + sin + ".jwt";
         System.IO.File.WriteAllText(receiptPath, json);
     }
     else
     {
         string sError = response.Content.ReadAsStringAsync().Result;
         throw new Exception(sError);
     }

 }
