Device Support
All operations may use a User Token, or  Device Token.
All operations require the use of the SoftFidoProvder Libaray supplied as part of the Code base.
All jsaon class and serialise/deserialise support are embeeded inside this library.


    #region DEVICESTOREFIDO
    private SoftFidoProvider.Fido.DeviceStore GetDeviceFidoStore(string storePath)
    {
        string sToken = System.IO.File.ReadAllText(storePath);
        SoftFidoProvider.Fido.DeviceStore store = new SoftFidoProvider.Fido.DeviceStore(sToken);
       
        // Check expire exp
        var securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(store.JwToken);
        var issuedAt = securityToken.IssuedAt;
        var validTo = securityToken.ValidTo;
        // Check refresh window 7 days before expired
        DateTime expired = issuedAt.AddDays(21);
        DateTime now = DateTime.UtcNow;
        if (now > expired)
        {
            string _jwToken = device_TokenRefresh(store);
            // Update UserToken
            store.JwToken = _jwToken;
            // Save 
            SaveDeviceStore(storePath, store);
        }
      
        return store;
    }
    private string device_TokenRefresh(SoftFidoProvider.Fido.DeviceStore store)
    {
        // Extract Function endpoint from User Token
        var securityToken = new JwtSecurityToken(store.JwToken);
        var claim = securityToken.Claims.FirstOrDefault(x => x.Type == "SecureIdentity");
        string _secureIdentity = claim.Value;
        claim = securityToken.Claims.FirstOrDefault(x => x.Type == System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Jti);
        string _jti = claim.Value;

        Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
        // Obtain Function JwToken
        HttpClient _httpClient = new HttpClient();
        // Build funtion endpoint Uri
        string _relativeUrl = "api/Device/TokenRefresh";
        Uri _uri = new Uri(_baseUri, _relativeUrl);
        _httpClient.BaseAddress = _baseUri;
        // Add User Jwtoken
        _httpClient.DefaultRequestHeaders.Add("x-token", store.JwToken);
        // Add Device Signature 
        byte[] dataBytes = Encoding.UTF8.GetBytes(_secureIdentity + _jti);
        // Device Signs Payment
        SoftFidoProvider.Fido d = new SoftFidoProvider.Fido(store.SecureIdentity,store.ProtectedDeviceKey);
        byte[] hashBytes = SHA256.Create().ComputeHash(dataBytes);
        byte[] signBytes = d.Sign(store.KeyHandle, hashBytes);
        _httpClient.DefaultRequestHeaders.Add("x-signature", Convert.ToBase64String(signBytes));
        // Get response
        HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
        if (response.IsSuccessStatusCode)
        {
            // pass
            string json = response.Content.ReadAsStringAsync().Result;
            return json;
        }
        else
        {
            // fail
            string error = response.Content.ReadAsStringAsync().Result;
            throw new Exception(error);
        }
    }
    private void SaveDeviceStore(string storePath, SoftFidoProvider.Fido.DeviceStore store)
    {
      
            // Serialise
            string json = store.ToJason();
            System.IO.File.WriteAllText(storePath, json);
      
    }
