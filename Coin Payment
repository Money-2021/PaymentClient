// User Token Payments
// LOCAL CURRENCY AREA PAYMENT
  [TestMethod]
  public void UseCase_coin_local_pay_to_sin()
  {
      // SinB pays SinA in PayMe token

      Set_AUD();
      string folder = Environment.GetEnvironmentVariable("Envionment");
      decimal amount = 5;
      // Step 1: Generate Credit PayMeToken
      string credit_sin = Environment.GetEnvironmentVariable("SinA");

      string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + credit_sin + ".jwt";
      UserToken.RecoveryResponse rsp = UserToken.GetUserToken(userTokenPath);
      string userToken = rsp.jwToken;
      // Generate PayMeToken
      string payMeToken = UserToken.PayMeToken(userTokenPath, amount);

      // ... send PayMeToken to Debit Secure Identity

      //Step 2: Debit Authorisation Token
      string debit_sin = Environment.GetEnvironmentVariable("SinB");
      // Debit user token
      userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + debit_sin + ".jwt";
      rsp = UserToken.GetUserToken(userTokenPath);

      // Payment Hash(payMeToken)
      byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(payMeToken + debit_sin));
      // Generate Debit functionToken
      string functionToken = UserToken.SignHash(userTokenPath, hashBytes);
                
      // Load post content 
      StringContent postContent = new StringContent(functionToken);
      // Extract Function endpoint from User Token
      JwtSecurityToken securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(rsp.jwToken);
      Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
      //_baseUri = new Uri("http://localhost:54718/");
      HttpClient _httpClient = new HttpClient();
      // Build funtion endpoint Uri
      string _relativeUrl = "Coin/PayToSin";
      Uri _uri = new Uri(_baseUri, _relativeUrl);
      _httpClient.BaseAddress = _baseUri;
      // Add User Jwtoken
      _httpClient.DefaultRequestHeaders.Add("x-token", payMeToken);
      // Post Payment
      HttpResponseMessage response = _httpClient.PostAsync(_uri, postContent).Result;
      if (response.IsSuccessStatusCode)
      {
          string jwToken = response.Content.ReadAsStringAsync().Result;
          string s = @"D:\Examples\" + node + @"\Payments\PayReceipt-" + debit_sin + ".json";
          System.IO.File.WriteAllText(s, jwToken);
      }
      else
      {
          //
          string error = response.Content.ReadAsStringAsync().Result;
          throw new Exception(error);
      }

  }

// CROSS CURRENCY AREA PAYMENT
[TestMethod]
public void UseCase_coin_cross_pay_to_sin()
{
    // PayToSin combined Mint Coin plus Process Coin

    Set_AUD();
    string folder = Environment.GetEnvironmentVariable("Envionment");

    // Credit
    // Generate PayMeToken
    string credit_sin = Environment.GetEnvironmentVariable("SinB");
    string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + credit_sin + ".jwt";
    UserToken.RecoveryResponse rsp = UserToken.GetUserToken(userTokenPath);
    string userToken = rsp.jwToken;
    decimal amount = 8; // AUD
    string payMeToken = UserToken.PayMeToken(userTokenPath, amount);


    // Use Case: Mint Coin ...
    // Debit 
    Set_USD();
    folder = Environment.GetEnvironmentVariable("Envionment");
    string debit_sin = Environment.GetEnvironmentVariable("SinC");
    userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + debit_sin + ".jwt";
    rsp = UserToken.GetUserToken(userTokenPath);

    // Payment Hash
    string shash = payMeToken + debit_sin;
    byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(shash));
    // SignHash
    string funtionToken = UserToken.SignHash(userTokenPath, hashBytes);
           
    // Load authorisation post content 
    StringContent content = new StringContent(funtionToken);  // Auth Token
    // Extract Function endpoint from User Token
    var securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(rsp.jwToken);
    // Post to debit infastruture
    HttpClient _httpClient = new HttpClient();
    string _relativeUrl = "Coin/PayToSin";
    Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
    Uri _uri = new Uri(_baseUri, _relativeUrl);
    _httpClient.BaseAddress = _baseUri;
    _httpClient.DefaultRequestHeaders.Add("x-token", payMeToken);
    HttpResponseMessage response = _httpClient.PostAsync(_uri, content).Result;
    if (response.IsSuccessStatusCode)
    {
        // PaymentResponse to debitor 
        string json = response.Content.ReadAsStringAsync().Result;
        string receiptPath = @"D:\Examples\" + node + @"\Payments\CoinPaymentReceipt-" + debit_sin + ".json";
        System.IO.File.WriteAllText(receiptPath, json);
    }
    else
    {
        string sError = response.Content.ReadAsStringAsync().Result;
        throw new Exception(sError);
    }
}

