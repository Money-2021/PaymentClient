Support Code 

  private static long BytesToLong(byte[] bytes)
  {
      // Convert first 8 bytes to a long.
      long l = BitConverter.ToInt64(bytes, 0);
      // Only return positive time values
      return System.Math.Abs(l);
  }

 private RecoveryResponse GetUserToken(string userTokenPath)
 {
     string sToken = System.IO.File.ReadAllText(userTokenPath);
     RecoveryResponse rsp = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);
     // Check protected
     if (rsp.isProtected.HasValue)
     {
         if (rsp.isProtected == false)
         {
             // Always protect
             rsp.isProtected = true;
             string encCode = Protect(rsp.setupcode);
             // Check 
             string pCode = UnProtect(encCode);
             if (pCode != rsp.setupcode)
                 throw new Exception("Setupcode different");
             rsp.setupcode = encCode;
             // Save with encypted setupcode
             string json = System.Text.Json.JsonSerializer.Serialize<RecoveryResponse>(rsp);
             System.IO.File.WriteAllText(userTokenPath, json);
             // Return plaintext
             rsp.setupcode = pCode;
         }
         else
         {
             string pCode = UnProtect(rsp.setupcode);
             rsp.setupcode = pCode;
         }
     }
     // Check expire exp
     var securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(rsp.userToken);
     var issuedAt = securityToken.IssuedAt;
     var validTo = securityToken.ValidTo;
     // Check refresh window 2 days before expired
     if (DateTime.UtcNow >= validTo.AddDays(-2))
     {
         RecoveryResponse r = user_TokenRefresh(rsp);
         securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(r.userToken);
         issuedAt = securityToken.IssuedAt;
         validTo = securityToken.ValidTo;

         // Update UserToken
         rsp.userToken = r.userToken;
         rsp.setupcode = r.setupcode; // Mandatory refresh
         r.isProtected = false; // unprotected from refresh
         // Save 
         SaveUserToken(userTokenPath, r);
     }
     return rsp;
 }
 private void SaveUserToken(string userTokenPath, RecoveryResponse rsp)
 {
     // Encrypted setupcode
     if (rsp.isProtected.HasValue)
     {
         if (rsp.isProtected == false)
         {
             // setupcode in plaintext. so protect
             rsp.setupcode = Protect(rsp.setupcode);
             rsp.isProtected = true;
         }
         // Serialise
         JsonSerializerOptions jso = new JsonSerializerOptions();
         jso.Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping;
         string json = System.Text.Json.JsonSerializer.Serialize<RecoveryResponse>(rsp, jso);
         System.IO.File.WriteAllText(userTokenPath, json);
     }
 }
 private string Protect(string data)
 {
     byte[] setupCodeBytes = Convert.FromBase64String(data);
     byte[] encBytes = ProtectedData.Protect(setupCodeBytes, null, DataProtectionScope.CurrentUser);
     return Convert.ToBase64String(encBytes);
 }
 private string UnProtect(string data)
 {
     byte[] setupCodeBytes = Convert.FromBase64String(data);
     byte[] pBytes = ProtectedData.Unprotect(setupCodeBytes, null, DataProtectionScope.CurrentUser);
     return Convert.ToBase64String(pBytes);
 }
   private RecoveryResponse user_TokenRefresh(RecoveryResponse r)
   {
       // Extract Function endpoint from User Token
       var securityToken = new JwtSecurityToken(r.userToken);
       var claim = securityToken.Claims.FirstOrDefault(x => x.Type == "SecureIdentity");
       string _secureIdentity = claim.Value;
       claim = securityToken.Claims.FirstOrDefault(x => x.Type == System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Jti);
       string _jti = claim.Value;
       Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
       // Obtain Function JwToken
       HttpClient _httpClient = new HttpClient();
       // Build funtion endpoint Uri
       string _relativeUrl = "api/User/TokenRefresh";
       Uri _uri = new Uri(_baseUri, _relativeUrl);
       _httpClient.BaseAddress = _baseUri;
       // Add User Jwtoken
       _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
       // Add OTP 
       var twoFactorAuthenticator = new Google.Authenticator.TwoFactorAuthenticator();
       byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(_secureIdentity+_jti));
       long counter = BytesToLong(hashBytes);
       string otpPin = twoFactorAuthenticator.GeneratePINAtInterval(r.setupcode, counter);
       _httpClient.DefaultRequestHeaders.Add("x-otp", otpPin);
       // Get response
       HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
       if (response.IsSuccessStatusCode)
       {
           // pass
           string json = response.Content.ReadAsStringAsync().Result;
           // New Rec
           return System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(json);
       }
       else
       {
           // fail
           string error = response.Content.ReadAsStringAsync().Result;
           throw new Exception(error);
       }
   }

private static bool VerifySignature(byte[] hashBytes, byte[] signature, byte[] publickKey)
{
    CngKey key = CngKey.Import(publickKey, CngKeyBlobFormat.EccPublicBlob);
    ECDsaCng signer = new ECDsaCng(key);
    return signer.VerifyHash(hashBytes, signature);
}
public static string BuildUrlWithQueryStringUsingUriBuilder(string basePath, Dictionary<string, string> queryParams)
{
    var uriBuilder = new UriBuilder(basePath)
    {
        Query = string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value}"))
    };
    return uriBuilder.Uri.AbsoluteUri;
}

// World Currecny Rate for 1/100 of an oz of gold
[TestMethod]
public void UseCase_payment_worldcurrency_rate()
{
    Set_AUD();
    string folder = Environment.GetEnvironmentVariable("Envionment");
    string sin = Environment.GetEnvironmentVariable("SinB");
    //  User Token
    string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + sin + ".jwt";
    RecoveryResponse rsp = GetUserToken(userTokenPath);

    // Extract Function endpoint from User Token
    var securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(rsp.userToken);
    Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
    // Obtain Function JwToken
    HttpClient _httpClient = new HttpClient();
    // Build funtion endpoint Uri
    string _relativeUrl = "api/Payment/WorldCurrencyRate";
    Uri _uri = new Uri(_baseUri, _relativeUrl);
    _httpClient.BaseAddress = _baseUri;
    _httpClient.DefaultRequestHeaders.Add("x-token", rsp.userToken);

 
    HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
    if (response.IsSuccessStatusCode)
    {
        string srate  = response.Content.ReadAsStringAsync().Result;
        decimal rate = decimal.Parse(srate);
        // WCU quote for AUD 100
        decimal value =   Math.Round(100 / rate, 4);
        Debug.WriteLine("AUD 100 = " + value.ToString("N4") +" bits or AUD " + (rate * 100).ToString("N4") + " per Oz" );

    }
    else
    {
        string sError = response.Content.ReadAsStringAsync().Result;
        throw new Exception(sError);
    }
}
