This demonstrates a common Valuting orld flow, for any user applciations

[TestMethod]
public void TestMethod_execute()
{
    string sin = Environment.GetEnvironmentVariable("TestA");
    string sToken = vault_me(sin); //establish valuting session
    // Object to Vault
    byte[] data = Encoding.UTF8.GetBytes("This is test content");
    Guid id = add_object(sin, data);   // Vault  Object
    certify_object(sin, id);  // Certify Vaulted Object 

}

  private string vault_me(string sin)
  {
      string userTokenPath = @"D:\Examples\VO\Token-" + sin + ".jwt";
      RecoveryResponse r = UserToken.GetUserToken(userTokenPath);
      string userToken = r.userToken;

      // Extract Function endpoint from User Token
      var securityToken = new JwtSecurityToken(r.userToken);
      Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
      //_baseUri = new Uri("http://localhost:54718/");

      // Obtain Function JwToken
      HttpClient _httpClient = new HttpClient();
      // Build funtion endpoint Uri
      string _relativeUrl = "User/VaultMe";
      Uri _uri = new Uri(_baseUri, _relativeUrl);
      _httpClient.BaseAddress = _baseUri;

      // Add User Jwtoken
      _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);

      // Get response
      HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
      if (response.IsSuccessStatusCode)
      {
         
          Stream receiveStream = response.Content.ReadAsStream();
          StreamReader reader = new StreamReader(receiveStream, Encoding.UTF8);
          string jwToken = reader.ReadToEnd();
          return jwToken;
      }
      else
      {
          // fail
          string error = response.Content.ReadAsStringAsync().Result;
          if (string.IsNullOrEmpty(error))
          {
              error = response.ReasonPhrase;
          }
          throw new Exception(error);
      }

  }
  private Guid add_object(string sin, byte[] data)
  {
      string userTokenPath = @"D:\Examples\VO\Token-" + sin + ".jwt";
      string sToken = System.IO.File.ReadAllText(userTokenPath);
      RecoveryResponse r = UserToken.GetUserToken(userTokenPath);

      // Use VaultMe token for this vaulting session
      userTokenPath = @"D:\Examples\VO\VaultMe-" + sin + ".jwt";
      sToken = System.IO.File.ReadAllText(userTokenPath);

      // Extract Function endpoint from User Token
      var securityToken = new JwtSecurityToken(r.userToken);
      Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
      //_baseUri = new Uri("https://localhost:7163/");

      // Obtain Function JwToken
      HttpClient _httpClient = new HttpClient();
      // Build funtion endpoint Uri
      string _relativeUrl = "Object/Add?filename=test.txt";
      Uri _uri = new Uri(_baseUri, _relativeUrl);
      _httpClient.BaseAddress = _baseUri;
      // Add VaultMe Jwtoken
      _httpClient.DefaultRequestHeaders.Add("x-token", sToken);
      // Add Vaulted object content in byte[] 
      ByteArrayContent content = new ByteArrayContent(data);
      // Get Vaulted Object Identifier response
      HttpResponseMessage response = _httpClient.PostAsync(_uri, content).Result;
      if (response.IsSuccessStatusCode)
      {
          // GUID
          string onjectId = response.Content.ReadAsStringAsync().Result;
          return new Guid(onjectId);
      }
      else
      {
          // fail
          string error = response.Content.ReadAsStringAsync().Result;
          if (string.IsNullOrEmpty(error))
          {
              error = response.ReasonPhrase;
          }
          throw new Exception(error);
      }
  }
  private void certify_object(string sin, Guid id)
  {
      string userTokenPath = @"D:\Examples\VO\Token-" + sin + ".jwt";
      string sToken = System.IO.File.ReadAllText(userTokenPath);
      RecoveryResponse r = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);

  
      // Extract Function endpoint from User Token
      var securityToken = new JwtSecurityToken(r.userToken);
      Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
      //_baseUri = new Uri("http://localhost:54718/");
      // Obtain JwToken
      HttpClient _httpClient = new HttpClient();
      // Build funtion endpoint Uri
      string _relativeUrl = "Object/Certify?objectId=" + id;
      Uri _uri = new Uri(_baseUri, _relativeUrl);
      _httpClient.BaseAddress = _baseUri;

      // Add VaultMe Jwtoken
      _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);

      // Get Vaulted Object Identifier response
      HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
      if (response.IsSuccessStatusCode)
      {
          // Download proof of existance certificate
          string certificate = response.Content.ReadAsStringAsync().Result;
          string spath = @"D:\Examples\VO\Certificate-" + id.ToString() + ".json";
          System.IO.File.WriteAllText(spath, certificate);
      }
      else
      {
          // fail
          string error = response.Content.ReadAsStringAsync().Result;
          throw new Exception(error);
      }

  }
